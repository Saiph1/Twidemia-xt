// Purpose: user profile page, with dynamic routing to different users according to userid

import Head from "next/head";
import Image from "next/image";
import { useState, useEffect } from "react";
import Sidebar from "@/components/Sidebar";
import Feed from "@/components/Feed";
import Widgets from "@/components/Widgets";
import ProfileContainer from "@/components/ProfileContainer";
import { useSession, signIn } from "next-auth/react";
import Slider from "@mui/material/Slider";
import dbConnect from "../../lib/dbConnect";
import Tweet_profile from "@/components/Tweet/Tweet_profile";

export default function Home(props) {
  const { status, data: session } = useSession({
    required: true,
    onUnauthenticated() {
      signIn();
    },
  });
  const [load, setload] = useState(false);
  const [follow, setfollow] = useState();
  const [block, setblock] = useState();
  const [followupdate, setfollowupdate] = useState(true);
  const [edit_update, setedit_update] = useState(true);
  // const [id, setid] = useState(props.id);
  const [userdata, setUserdata] = useState({
    username: "Rendering...",
    email: "Rendering...",
    userId: "Rendering...",
    password: "Rendering...",
    faculty: "Rendering...",
    followerlist: [],
    followinglist: [],
    year: 0,
  });
  // useEffect(()=>{
  //   setid(props.id);
  // })
  // fetching user data for profile
  useEffect(() => {
    if (!session) return;
    fetch("/api/user/" + props.id)
      .then((res) => res.json())
      .then((data) => {
        setUserdata(data.data);
        setfollow(
          data.data.followerlist
            .map((item) => item.userId === session.user.userId)
            .includes(true)
        );
        setblock(
          data.data.blocklist
            .map((item) => item.userId === session.user.userId)
            .includes(true)
        );
        console.log(block);
      })
      .then(() => setload(true));
  }, [session, props]);
  // item.userId === session.user.UserId
  useEffect(() => {
    if (!session) return;
    console.log(props.id);
    fetch("/api/user/" + props.id)
      .then((res) => res.json())
      .then((data) => {
        setUserdata(data.data);
        console.log(userdata);
        setfollow(
          data.data.followerlist
            .map((item) => item.userId === session.user.userId)
            .includes(true)
        );
        setblock(
          data.data.blocklist
            .map((item) => item.userId === session.user.userId)
            .includes(true)
        );
      })
      .then(() => setedit_update(true));
  }, [edit_update]);

  function updates() {
    setload(false);
  }

  function updates_true() {
    setload(true);
  }

  function follow_update() {
    // setload(false);
    // setfollowupdate(!followupdate);
    setedit_update(false);
    setfollow(!follow);
  }

  function block_update() {
    // setload(false);
    // setfollowupdate(!followupdate);
    setedit_update(false);
    setblock(!block);
  }

  if (session) {
    return (
      <>
        <Head>
          <title>Twidemia</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/Twidemia-logo.png" />
        </Head>

        <main className="min-h-screen bg-white">
          <div className="h-full max-w-6xl container mx-auto xl:px-30">
            <div className="h-full grid grid-cols-5">
              <Sidebar user={session.user} update={updates} />
              <div className="col-span-4 lg:col-span-3 border-x-[1px]">
                <ProfileContainer
                  update_parent={updates}
                  user={userdata}
                  myprofile={session.user.userId === props.id}
                  loaded={load}
                  viewerid={session.user.userId}
                  followed={follow}
                  blocked={block}
                  followupdate={follow_update}
                  editupdate={() => setedit_update(false)}
                  updates_true={() => updates_true()}
                  block_update={block_update}
                />
                <div className="py-8 flex flex-col items-center gap-4 bg-white">
                  {userdata.tweetlist?.map((item, index) => (
                    <Tweet_profile
                      tweet={item}
                      viewerid={props.id}
                      key={index}
                    />
                  ))}
                </div>
              </div>
              <Widgets
                update_page={updates}
                user={session.user.userId}
                profile={props.id}
              />
            </div>
          </div>

          {/* Sidebar */}
        </main>
      </>
    );
  }
}

export async function getServerSideProps(context) {
  let isDbConnected = false;

  try {
    // Try to connect the DB.
    if (await dbConnect()) isDbConnected = true;
  } catch (e) {
    // If it cannot connect to DB, output log to console by using error flag.
    console.error(e);
  }

  let id = context.query.userid;
  // Return all post and login status by props.
  return { props: { isDbConnected, id } };
}
